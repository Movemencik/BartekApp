@page "/HistoryPage"
@using System.Collections.ObjectModel
@using BartekApp.Data
@using BartekApp.Enums
@using Transaction = BartekApp.Models.Transaction
@inject TransactionService TransactionService
@inject NavigationManager Navigation
@inject IJSRuntime JS


<div class="container mt-3">
    <h2 class="mb-4">Historia transakcji</h2>
    
    <div class="mb-3">
        <a href="/" class="btn btn-secondary">Wróć</a>
    </div>
    
    <div class="d-flex flex-wrap">
        <div class="btn-group mb-4 flex-grow-1">
            <button class="btn btn-primary, btn-outline-primary" @onclick="() => FilterTransactions(null)">Wszystkie</button>
            <button class="btn btn-success, btn-outline-success" @onclick="() => FilterTransactions(true)">Przychody</button>
            <button class="btn btn-danger, btn-outline-danger" @onclick="() => FilterTransactions(false)">Wydatki</button>
        </div>
        <div class="btn-group mb-4 d-flex flex-wrap flex-grow-1">
            <button class="btn btn-success, btn-outline-success" @onclick="() => FilterTransactionsV(CashCategory.Selling)">Przychody</button>
            <button class="btn btn-success, btn-outline-success" @onclick="() => FilterTransactionsV(CashCategory.Delivery)">Dowozy</button>
            <button class="btn btn-success, btn-outline-success" @onclick="() => FilterTransactionsV(CashCategory.CashRegister)">Pianino</button>
            <button class="btn btn-danger, btn-outline-danger" @onclick="() => FilterTransactionsV(CashCategory.Expenses)">Wydatki</button>
            <button class="btn btn-danger, btn-outline-danger" @onclick="() => FilterTransactionsV(CashCategory.EmployeeSalary)">Pracownik</button>
        </div>
    </div>
    
    
    <table class="table">
        <thead>
        <tr>
            <th>Data</th>
            <th>Typ</th>
            <th>Kwota</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var transaction in transactions)
        {
            <tr>
                <td>@transaction.Date.ToShortDateString()</td>
                <td>
                    @if (transaction.IsIncome)
                    {
                        <span class="badge bg-success">Przychód</span>
                    }
                    else
                    {
                        <span class="badge bg-danger">Wydatek</span>
                    }
                </td>
                <td class="@(transaction.IsIncome ? "text-success" : "text-danger")">
                    @transaction.Amount.ToString("C")
                </td>
                <td>
                    <div class="d-flex flex-column" style="gap: 10px; width: 55px;">
                        <button class="btn btn-sm btn-primary" @onclick="() => EditTransaction(transaction.Id)">Edytuj</button>
                        <button class="btn btn-danger" @onclick="() => DeleteTransactionWithConfirmation(transaction.Id)">Usuń</button>
                    </div>
                    
                </td>
            </tr>
        }

        </tbody>
    </table>
</div>
    

@code {
    private ObservableCollection<Transaction> transactions = new();
    private bool showAll = true;
    
    private bool showModal = false;
    private int transactionIdToDelete;
    
    protected override async Task OnInitializedAsync()
    {
        await FilterTransactions(null);
        await FilterTransactionsV(null);
    }
    
    private async Task FilterTransactions(bool? isIncome)
    {
        showAll = isIncome == null;
        transactions = await TransactionService.GetTransactionsAsync(isIncome);
    }
    
    private async Task FilterTransactionsV(CashCategory? category)
    {
        showAll = category == null;
        transactions = await TransactionService.GetTransactionsVAsync(category);
    }
    
    private void EditTransaction(int id)
    {
        Navigation.NavigateTo($"/EditTransactionPage/{id}");
    }
    private async Task DeleteTransaction(int id)
    {
        await TransactionService.DeleteTransactionAsync(id);
        transactions.Remove(transactions.FirstOrDefault(t => t.Id == id));
    }
    private async Task DeleteTransactionWithConfirmation(int transactionId)
    {
        bool confirmDelete = await JS.InvokeAsync<bool>("confirm", "Czy chcesz usunąć tę transakcję?");
    
        if (confirmDelete)
        {
            await DeleteTransaction(transactionId);
        }
    }
}